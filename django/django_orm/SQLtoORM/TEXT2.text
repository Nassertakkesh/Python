from django.db import models

class Hogwarts(models.Model):
    name = models.CharField(max_length=45)
    house = models.CharField(max_length=45)
    pet = models.CharField(max_length=45)
    year = models.IntegerField()

# # SQL TO ORM
# # INSERT INTO Hogwarts (name, house, pet, year) VALUES ('Harry Potter', 'Gryffindor', 'Hedwig', '5');copy
# Hogwarts.objects.create(name = 'Harry Potter', house = 'Gryffindor', pet = 'hedwig', year = '5')

# # INSERT INTO Hogwarts (name, house, pet, year) VALUES ('Hermione Granger', 'Gryffindor', 'Crookshanks', '5');
# Hogwarts.objects.create(name = 'Hermione Granger', house = 'Gryffindor', pet = 'Crookshanks', year = '5')

# # SELECT * FROM Hogwarts WHERE id = 1;
# Hogwarts.objects.filter(id = '1')

# # SELECT * FROM Hogwarts WHERE house = 'Gryffindor';
# Hogwarts.objects.filter(house = 'Gryffindor')

# # UPDATE Hogwarts SET year = '6' WHERE id = 1;
# c = Hogwarts.objects.get(id = '1')
# c.year = 6
# # c.save()


# # # ORM TO SQL

# # # Hogwarts.objects.create(name="Draco Malfoy", house="Slytherin", pet="Unknown", year="5")
# # INSERT INTO Hogwarts (name, house, pet, year) VALUES ('Draco Malfoy', 'Slytherin', 'Unknown', '5');

# # # Hogwarts.objects.create(name="Luna Lovegood", house="Ravenclaw", pet="None", year="4")
# # INSERT INTO Hogwarts (name, house, pet, year) VALUES ('Luna Lovegood', 'Ravenclaw', 'None', '4');

# # # Hogwarts.objects.create(name="Padma Patil", house="Ravenclaw", pet="None", year="5")
# # INSERT INTO Hogwarts (name, house, pet, year) VALUES ('Padma Patil', 'Ravenclaw', 'None', '5');

# # # ravenclaws = Hogwarts.objects.filter(house="Ravenclaw")
# # SELECT * FROM Hogwarts WHERE  house =avenclaw';

# # # luna = Hogwarts.objects.get(name="Luna Lovegood")
# # # luna.year = 5
# # # luna.save()

# # UPDATE Hogwarts SET year = '5' WHERE name = 'Luna Lovegood';

class users(models.Model):
    first_name = models.CharField(max_length=255)
    last_name = models.CharField(max_length=255)
    email_address = models.CharField(max_length=255)
    age = models.IntegerField()
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)



# #  Query: Create 3 new users
# users.objects.create(first_name="Draco Malfoy", last_name="Slytherin", email_address="Unknown", age="25")
# users.objects.create(first_name="Harry Potter", last_name="Gryffindor", email_address="Hedwig", age="25")
# users.objects.create(first_name="Hermione Granger", last_name="Gryffindor", email_address="Crookshank", age="25")

# #  Query: Retrieve all the users
# users.objects.all()

# #  Query: Retrieve the last user
# users.objects.last()

# #  Query: Retrieve the first user
# users.objects.first()

# #  Query: Change the user with id=3 so their last name is Pancakes.
# c = users.objects.get(id=3)
# c.last_name = "Pancakes"
# c.save()

# #  Query: Delete the user with id=2 from the database
# c = users.objects.get(id=2)
# c.delete()

# #  Query: Get all the users, sorted by their first name
# users.objects.all().order_by("first_name")
# #  BONUS Query: Get all the users, sorted by their first name in descending order
# users.objects.all().order_by("-first_name")
# #  Submit your .txt file that contains all the queries you ran in the shell



# Dojo Class and Ninja

class dojo(models.Model):
    first_name = models.CharField(max_length=255)
    city =  models.CharField(max_length=255)
    state = models.CharField(max_length=255)

class ninja(models.Model):
    first_name = models.CharField(max_length=255)
    last_name = models.CharField(max_length=255)
    assigned_dojo = models.ForeignKey(dojo, related_name="enrolled_ninjas")
# the thing that is foriegn iss the table DOJO, the foreign key goes on the many  filter(first_name = "OC DOJO")



# # #  Query: Create 3 new users
dojo.objects.create(first_name="LA DOJO", city="LA", state = "CA")
dojo.objects.create(first_name="SF DOJO", city="SF", state = "CA")
dojo.objects.create(first_name="OC DOJO", city="OC", state = "CA")

ninja.objects.create(first_name="Harry", last_name="Potter", assigned_dojo= dojo.objects.get(id = "1"))





>>> ninja.objects.create(first_name="Harry", last_name="Potter", assigned_dojo= dojo.objects.filter(first_name = "OC DOJO"))
Traceback (most recent call last):
  File "<console>", line 1, in <module>
  File "/Users/Nasser/Desktop/Coding_Dojo/Python/my_enviroments/Django/lib/python3.7/site-packages/django/db/models/manager.py", line 85, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/Users/Nasser/Desktop/Coding_Dojo/Python/my_enviroments/Django/lib/python3.7/site-packages/django/db/models/query.py", line 397, in create
    obj = self.model(**kwargs)
  File "/Users/Nasser/Desktop/Coding_Dojo/Python/my_enviroments/Django/lib/python3.7/site-packages/django/db/models/base.py", line 537, in __init__
    setattr(self, field.name, rel_obj)
  File "/Users/Nasser/Desktop/Coding_Dojo/Python/my_enviroments/Django/lib/python3.7/site-packages/django/db/models/fields/related_descriptors.py", line 211, in __set__
    self.field.remote_field.model._meta.object_name,
ValueError: Cannot assign "<QuerySet [<dojo: dojo object>]>": "ninja.assigned_dojo" must be a "dojo" instance.
>>> 
>>> ninja.objects.create(first_name="Harry", last_name="Potter", assigned_dojo= dojo.objects.get(id = "1"))
<ninja: ninja object>
>>> 
>>> ninja.objects.create(first_name="Harry", last_name="Potter", assigned_dojo= dojo.objects.get(id = "2"))
<ninja: ninja object>
>>> ninja.objects.get(id="2").delete()
(1, {'SQLApp.ninja': 1})
>>> ninja.objects.create(first_name="Hermione", last_name="Granger", assigned_dojo= dojo.objects.get(id = "1"))
<ninja: ninja object>
>>> ninja.objects.create(first_name="Draco", last_name="Malfoy", assigned_dojo= dojo.objects.get(id = "1"))
<ninja: ninja object>
>>> ninja.objects.create(first_name="Hermione1", last_name="Granger1", assigned_dojo= dojo.objects.get(id = "2"))
<ninja: ninja object>
>>> ninja.objects.create(first_name="Draco1", last_name="Malfoy1", assigned_dojo= dojo.objects.get(id = "2"))
<ninja: ninja object>
>>> ninja.objects.create(first_name="Harry", last_name="Potter", assigned_dojo= dojo.objects.get(id = "2"))
<ninja: ninja object>
>>> ninja.objects.create(first_name="Harry2", last_name="Potter2", assigned_dojo= dojo.objects.get(id = "3"))
<ninja: ninja object>
>>> ninja.objects.create(first_name="Hermione2", last_name="Granger2", assigned_dojo= dojo.objects.get(id = 32"))
  File "<console>", line 1
    ninja.objects.create(first_name="Hermione2", last_name="Granger2", assigned_dojo= dojo.objects.get(id = 32"))
                                                                                                                ^
SyntaxError: EOL while scanning string literal
>>> ninja.objects.create(first_name="Hermione2", last_name="Granger2", assigned_dojo= dojo.objects.get(id = 3"))
  File "<console>", line 1
    ninja.objects.create(first_name="Hermione2", last_name="Granger2", assigned_dojo= dojo.objects.get(id = 3"))
                                                                                                               ^
SyntaxError: EOL while scanning string literal
>>> ninja.objects.create(first_name="Hermione2", last_name="Granger2", assigned_dojo= dojo.objects.get(id =" 3"))
<ninja: ninja object>
>>> dojo.objects.enrolled.ninjas.all()
Traceback (most recent call last):
  File "<console>", line 1, in <module>
AttributeError: 'Manager' object has no attribute 'enrolled'
>>> dojo.objects.all()
<QuerySet [<dojo: dojo object>, <dojo: dojo object>, <dojo: dojo object>]>
>>> dojo.objects.all().values
<bound method QuerySet.values of <QuerySet [<dojo: dojo object>, <dojo: dojo object>, <dojo: dojo object>]>>
>>> dojo.objects.all().values()\
... dojo.objects.all().values()
  File "<console>", line 2
    dojo.objects.all().values()
       ^
SyntaxError: invalid syntax
>>> dojo.objects.all().values()
<QuerySet [{'id': 1, 'first_name': 'SF DOJO', 'city': 'SF', 'state': 'CA'}, {'id': 2, 'first_name': 'OC DOJO', 'city': 'OC', 'state': 'CA'}, {'id': 3, 'first_name': 'LA DOJO', 'city': 'LA', 'state': 'CA'}]>
>>> ninja.objects.get(assigned_dojo = "1")
Traceback (most recent call last):
  File "<console>", line 1, in <module>
  File "/Users/Nasser/Desktop/Coding_Dojo/Python/my_enviroments/Django/lib/python3.7/site-packages/django/db/models/manager.py", line 85, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/Users/Nasser/Desktop/Coding_Dojo/Python/my_enviroments/Django/lib/python3.7/site-packages/django/db/models/query.py", line 389, in get
    (self.model._meta.object_name, num)
apps.SQLApp.models.MultipleObjectsReturned: get() returned more than one ninja -- it returned 3!
>>> ninja.objects.assigned_dojo.all()
Traceback (most recent call last):
  File "<console>", line 1, in <module>
AttributeError: 'Manager' object has no attribute 'assigned_dojo'
>>> cp=ninja.objects
>>> cp.assigned_dojo.first_name
Traceback (most recent call last):
  File "<console>", line 1, in <module>
AttributeError: 'Manager' object has no attribute 'assigned_dojo'
>>> cp.value()
Traceback (most recent call last):
  File "<console>", line 1, in <module>
AttributeError: 'Manager' object has no attribute 'value'
>>> ninja.objects.get(assigned_dojo = "1")
Traceback (most recent call last):
  File "<console>", line 1, in <module>
  File "/Users/Nasser/Desktop/Coding_Dojo/Python/my_enviroments/Django/lib/python3.7/site-packages/django/db/models/manager.py", line 85, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/Users/Nasser/Desktop/Coding_Dojo/Python/my_enviroments/Django/lib/python3.7/site-packages/django/db/models/query.py", line 389, in get
    (self.model._meta.object_name, num)
apps.SQLApp.models.MultipleObjectsReturned: get() returned more than one ninja -- it returned 3!
>>> ninja.objects.all().value()
Traceback (most recent call last):
  File "<console>", line 1, in <module>
AttributeError: 'QuerySet' object has no attribute 'value'
>>> ninja.objects.all()
<QuerySet [<ninja: ninja object>, <ninja: ninja object>, <ninja: ninja object>, <ninja: ninja object>, <ninja: ninja object>, <ninja: ninja object>, <ninja: ninja object>, <ninja: ninja object>]>
>>> ninja.objects.all().value()
Traceback (most recent call last):
  File "<console>", line 1, in <module>
AttributeError: 'QuerySet' object has no attribute 'value'
>>> ninja.objects.all()__dict__
  File "<console>", line 1
    ninja.objects.all()__dict__
                              ^
SyntaxError: invalid syntax
>>> ninja.objects.all().values()
<QuerySet [{'id': 1, 'first_name': 'Harry', 'last_name': 'Potter', 'assigned_dojo_id': 1}, {'id': 3, 'first_name': 'Hermione', 'last_name': 'Granger', 'assigned_dojo_id': 1}, {'id': 4, 'first_name': 'Draco', 'last_name': 'Malfoy', 'assigned_dojo_id': 1}, {'id': 5, 'first_name': 'Hermione1', 'last_name': 'Granger1', 'assigned_dojo_id': 2}, {'id': 6, 'first_name': 'Draco1', 'last_name': 'Malfoy1', 'assigned_dojo_id': 2}, {'id': 7, 'first_name': 'Harry', 'last_name': 'Potter', 'assigned_dojo_id': 2}, {'id': 8, 'first_name': 'Harry2', 'last_name': 'Potter2', 'assigned_dojo_id': 3}, {'id': 9, 'first_name': 'Hermione2', 'last_name': 'Granger2', 'assigned_dojo_id': 3}]>
>>> ninja.objects.filter(assigned_dojo = '3')
<QuerySet [<ninja: ninja object>, <ninja: ninja object>]>
>>> ninja.objects.filter(assigned_dojo = '3').values()
<QuerySet [{'id': 8, 'first_name': 'Harry2', 'last_name': 'Potter2', 'assigned_dojo_id': 3}, {'id': 9, 'first_name': 'Hermione2', 'last_name': 'Granger2', 'assigned_dojo_id': 3}]>
>>> ninja.objects.filter(assigned_dojo = '1').values()
<QuerySet [{'id': 1, 'first_name': 'Harry', 'last_name': 'Potter', 'assigned_dojo_id': 1}, {'id': 3, 'first_name': 'Hermione', 'last_name': 'Granger', 'assigned_dojo_id': 1}, {'id': 4, 'first_name': 'Draco', 'last_name': 'Malfoy', 'assigned_dojo_id': 1}]>
>>> x=ninja.objects.last()
>>> x.assigned_dojo
<dojo: dojo object>
>>> x.assigned_dojo.values()
Traceback (most recent call last):
  File "<console>", line 1, in <module>
AttributeError: 'dojo' object has no attribute 'values'
>>> x.assigned_dojo
<dojo: dojo object>
>>> x.assigned_dojo__dict__
Traceback (most recent call last):
  File "<console>", line 1, in <module>
AttributeError: 'ninja' object has no attribute 'assigned_dojo__dict__'
>>> x.assigned_dojo.first_name
'LA DOJO'
>>> 


>, <ninja: ninja object>, <ninja: ninja object>]>
>>> exit()
(Django) Nassers-MacBook-Pro:SQLtoORM Nasser$ python3 manage.py makemigrations
You are trying to add a non-nullable field 'desc' to dojo without a default; we can't do that (the database needs something to populate existing rows).
Please select a fix:
 1) Provide a one-off default now (will be set on all existing rows with a null value for this column)
 2) Quit, and let me add a default in models.py
Select an option: 1
Please enter the default value now, as valid Python
The datetime and django.utils.timezone modules are available, so you can do e.g. timezone.now
Type 'exit' to exit this prompt
>>> "oldDojo"
Migrations for 'SQLApp':
  apps/SQLApp/migrations/0007_dojo_desc.py:
    - Add field desc to dojo
(Django) Nassers-MacBook-Pro:SQLtoORM Nasser$ python3 manage.py migrate
Operations to perform:
  Apply all migrations: SQLApp, admin, auth, contenttypes, sessions
Running migrations:
  Rendering model states... DONE
  Applying SQLApp.0007_dojo_desc... OK
(Django) Nassers-MacBook-Pro:SQLtoORM Nasser$ python3 manage.py makemigrations
(Django) Nassers-MacBook-Pro:SQLtoORM Nasser$ python3 manage.py makemigrations
No changes detected
(Django) Nassers-MacBook-Pro:SQLtoORM Nasser$ python3 manage.py shell
Python 3.7.4 (default, Jul  9 2019, 18:13:23) 
[Clang 10.0.1 (clang-1001.0.46.4)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
(InteractiveConsole)
>>> from apps.SQLApp.models import*
>>> dojo.objects.create(first_name="LA DOJO", city="LA", state = "CA",desc = "hey there")
<dojo: dojo object>
>>> 